{{#resources}}
{{>licenseInfo}}
import json
import warnings
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from sendgrid.base import values
from sendgrid.exceptions import ApiException
from sendgrid.http.request import Request
from sendgrid.http.response import ApiResponse

{{#imports}}
{{import}}
{{/imports}}

{{#operations}}
class {{classname}}:
    def __init__(self, client) -> None:
        self.client = client
    
    def send(
        self,
        {{>helper/method_args}}
    ):
        path='{{path}}'
{{#vendorExtensions.has-pathParams}}
        path = path.format(
    {{#pathParams}}
        {{paramName}}={{paramName}},
    {{/pathParams}}
        )
    {{/vendorExtensions.has-pathParams}}

    {{#vendorExtensions.has-headerParams}}
        headers = values.of(
        {
        {{#headerParams}}
            '{{baseName}}': {{paramName}},
        {{/headerParams}}
        })
        headers["Content-Type"] = "application/json"
    {{/vendorExtensions.has-headerParams}}
        data = None
    {{#vendorExtensions.has-body}}
        {{#bodyParams}}
        if {{paramName}}:
            data = {{paramName}}.to_dict()
        {{/bodyParams}}
    {{/vendorExtensions.has-body}}
        request = Request(
            method='{{httpMethod}}',
            url=path,
            data=data,
            headers=headers
        )
        response=self.client.send(request)
        if response is None:
            raise ApiException(error="CreateAlert creation failed: Unable to connect to server")
        if response.is_success():
            return ApiResponse(status_code=response.status_code, model=json.loads(response.text), headers=response.headers)
        else:
            if response.text:
                text = json.loads(response.text)
            else:
                text = ""
            raise ApiException(status_code=response.status_code, error=json.loads(response.text), headers=response.headers)
{{/operations}}
{{/resources}}