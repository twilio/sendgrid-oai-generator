
class {{classname}}:
    def __init__(
            self,
        {{#vars}}
            {{name}}: Optional[{{{dataType}}}]=None{{^-last}},{{/-last}}
        {{/vars}}
    ):
    {{#vars}}
        self.{{name}}={{name}}
    {{/vars}}

    def to_dict(self):
        return {key: to_serializable(value)
            for key, value in {
        {{#vars}}
            "{{name}}": self.{{name}}{{^-last}},{{/-last}}
        {{/vars}}
            }.items() if value is not None}

    @classmethod
    def from_dict(cls, data):
        return from_serializable(data, cls)

    @staticmethod
    def generate_model(payload: Dict[str, object]):
        return {{classname}}(
        {{#vars}}
            {{name}}=payload.get('{{name}}'){{^-last}},{{/-last}}
        {{/vars}}
        )